# -*- coding: utf-8 -*-
"""DepressionAnxiety.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o6Ibg5WdKnZ4qQxmo3bGUOFtlmDT6ACA
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder
from sklearn.metrics import accuracy_score, roc_auc_score, confusion_matrix
from sklearn.linear_model import LogisticRegression

# Loaded data from CSV file
data = pd.read_csv("depression_anxiety_data.csv")

data = data.replace([np.inf, -np.inf], np.nan)
data = data.replace("", np.nan)
data = data.dropna(axis = 0)
data = data.dropna(axis=1)


print("before dummying and dropping columns: ")
data.info()
print(data.size)


# Removed unnecessary columns
data.drop(columns=["id", "school_year", "who_bmi", "depression_severity", "depressiveness"], inplace=True)


# encoded the gender using pd.get_dummies()
data = pd.get_dummies(data, columns=["gender"])

# performed one-hot encoding on anxiety_severity using pd.get_dummies()
data = pd.get_dummies(data, columns=["anxiety_severity"])


# encoded the depression_diagnosis using pd.get_dummies()
data = pd.get_dummies(data, columns=["depression_diagnosis"])


# encoded the depression_treatment using pd.get_dummies()
data = pd.get_dummies(data, columns=["depression_treatment"])


# encoded the anxiousness using pd.get_dummies()
data = pd.get_dummies(data, columns=["anxiousness"])


# encoded the anxiety_diagnosis using pd.get_dummies()
data = pd.get_dummies(data, columns=["anxiety_diagnosis"])


# encoded the anxiety_treatment using pd.get_dummies()
data = pd.get_dummies(data, columns=["anxiety_treatment"])


# encoded the sleepiness using pd.get_dummies()
data = pd.get_dummies(data, columns=["sleepiness"])


# splitted the data into X (input) and y (output)
X = data.drop(columns=["suicidal"]).values
y = data["suicidal"].values

# scaled age and bmi by using StandardScaler
scaler = StandardScaler()
X[:, [1, 2]] = scaler.fit_transform(X[:, [1, 2]])

# Splitted data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=18)


data.info()
data.shape
data.head()

y_train.shape
y_train.dtype

# LabelEncoder object created
label_encoder = LabelEncoder()

# converted the target variable (y_train) by LabelEncoder
y_train_encoded = label_encoder.fit_transform(y_train)

print(y_train_encoded)

X_train.shape
X_train.dtype

X_test.shape
X_test.dtype

#Object type wasn't accepted so iy_test encoded to int type
y_test_encoded = label_encoder.fit_transform(y_test)
y_test_encoded.dtype
print(y_test_encoded)

# created a logistic regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train_encoded)

# evaluate the model on the test set
score = model.score(X_test, y_test_encoded)
print("Accuracy score:", score)
y_pred = model.predict(X_test)
print("ROC AUC score: ",roc_auc_score(y_pred, y_test_encoded))

# create a confusion matrix
cm = confusion_matrix(y_test_encoded, y_pred)
print("Confusion matrix:\n", cm)



# create a heatmap of the confusion matrix
sns.heatmap(cm, annot=True, fmt='d', cmap="Blues")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

df = pd.DataFrame({'Ger√ßek': y_test_encoded, 'Tahmin': y_pred})
print(df)

logistic_predict_data=np.array([[18,25.102391,8,6,6.0,0,1,1,0,0,0,1,0,1,0,0,1,1,0,1,0,1,0]])   #Suicidal: True 
tahminDegeri=model.predict(logistic_predict_data)
print("The person whose values are given above is Suicidal, the value that the model outputs is:", tahminDegeri)